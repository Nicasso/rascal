infix BooleanOperators "&&", "||", "\<==\>", "==\>" { bool x bool -> bool }

infix Comparison "\<", "\<=", "==", "\>=", "\>" { &T x &T -> bool }

prefix Negation "!" { bool -> bool }
 
infix Addition "+"
	{  
      &L <: num x &R <: num               -> LUB(&L, &R),
      
      list[&L] x list[&R]                 -> list[LUB(&L,&R)],
	  list[&L] x &R              		  -> list[LUB(&L,&R)] when &R is not a list,	  
	  &L x list[&R <: &L]                 -> list[LUB(&L,&R)] when &L is not a list,
	  
	  set[&L] x set[&R]                   -> set[LUB(&L,&R)],
	  set[&L] x &R                        -> set[LUB(&L,&R)] when &R is not a list,
	  &L x set[&R]                        -> set[LUB(&L,&R)] when &L is not a list,
	  
	  map[&K1,&V1] x map[&K2,&V2]         -> map[LUB(&K1,&K2), LUB(&V1,&V2)],
	  
	  str x str                           -> str,
	  loc x str                           -> loc,
	  tuple[&L1,&L2] x tuple[&R1,&R2,&R3] -> tuple[&L1,&L2,&R1,&R2,&R3]
	}
	
infix Difference "-" {
 	 &L <: num x &R <: num                -> LUB(&L, &R),
 	 list[&L] x list[&R]                  -> list[LUB(&L,&R)],
 	 set[&L] x set[&R]                    -> set[LUB(&L,&R)],
 	 map[&K1,&V1] x map[&K2,&V2]          -> map[LUB(&K1,&K2), LUB(&V1,&V2)]
}

infix Product "*" {
 	 &L <: num x &R <: num                -> LUB(&L, &R),
 	 list[&L] x list[&R]                  -> lrel[&L,&R],
 	 set[&L] x set[&R]                    -> rel[&L,&R]
}

infix Intersection "&" {
 	list[&L] x list[&R]                  -> list[LUB(&L,&R)],
 	set[&L] x set[&R]                    -> set[LUB(&L,&R)],
 	map[&K1,&V1] x map[&K2,&V2]          -> map[LUB(&K1,&K2), LUB(&V1,&V2)]
} 

prefix UnaryMinus "-" { &L <: num -> &L }

infix Modulo "%" { int x int -> int }

infix Division "/" { &L <: num x &R <: num        -> LUB(&L, &R) }

postfix Closure "+", "*" { // Closure
     lrel[&L,&L]			-> lrel[&L,&L],
     rel[&L,&L]  			-> rel[&L,&L]
}

infix Composition "o" {
     lrel[&A,&B] x lrel[&B,&C] -> lrel[&A,&C],
     rel[&A,&B] x rel[&B,&C] -> rel[&A,&C],
     map[&A,&B] x map[&B,&C] -> map[&A,&C]
}