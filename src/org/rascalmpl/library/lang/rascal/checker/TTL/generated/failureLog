
[ExpressionKO] *** wrong type or no warning/error messages for (-169170905) < (0.6331780750577181);
[ExpressionKO] *** wrong type or no warning/error messages for ((({}) + ({false,true})) + ({false,true})) + ({false});
[ExpressionKO] *** wrong type or no warning/error messages for (0.7829919706964662) <= (1295795355);
[ExpressionsOK] *** Failed test for: ((-251777213) + (([-1239005009]) - ([1692229328]))) - (([-1496838281r1905089489]) + (685681730r719601251)); --- expression is supposed to be type correct
expectedType: list(rat()), actualType: list(int())

[Statements52] stats: map[int,lrel[datetime]] X0 = (1958266861:[],-1734206211:[<$2014-06-03T14:50:11.754+01:00>],1869639482:[],-122105068:[]); map[int,lrel[datetime]] y = X0;
[Statements52] *** Unexpected messages: {error("Initializer type map[int, list[tuple[datetime]]] not assignable to variable of type map[int, void]",|file://-|(26,95,<1,26>,<1,121>))}

[Statements54] stats: x = 429251953; x = false;
[Statements54] *** Unexpected messages: {warning("Name defined outside of current module",|file://-|(17,1,<1,17>,<1,18>))}

[Statements52] stats: lrel[rat] X0 = [<1837063r755088384>,<1274387161r562643050>]; lrel[rat] y = X0;
[Statements52] *** Unexpected messages: {error("Type lrel does not accept type parameters",|file://-|(63,9,<1,63>,<1,72>)),error("Initializer type lrel[rat] not assignable to variable of type void",|file://-|(12,49,<1,12>,<1,61>)),error("Type lrel does not accept type parameters",|file://-|(2,9,<1,2>,<1,11>))}


[Operators7] *** Failed test for: (0.15687028828273752) == (177357291); --- signature &T x &T -> bool 
arg1=0.15687028828273752, arg2=177357291
expectedType: bool(), actualType: failure({error("real and int incomparable",|file://-|(2,36,<1,2>,<1,38>))})

[Operators23] *** Failed test for: ([<()>,<(<"l"()>:$3451-07-22T19:16:42.221+01:00,<""()>:$2014-01-04T15:54:05.135+01:00)>]) - ([]); --- signature list[&L] x list[&R]                  -> list[LUB(&L,&R)]
arg1=[<()>,<(<"l"()>:$3451-07-22T19:16:42.221+01:00,<""()>:$2014-01-04T15:54:05.135+01:00)>], arg2=[]
expectedType: list(map(tuple([node()]),datetime())), actualType: lrel([map(tuple([node()]),datetime())])

[Operators5] *** Failed test for: (({}:0.31874336802870507)) < (({}:-1099447029)); --- signature &T x &T -> bool 
arg1=({}:0.31874336802870507), arg2=({}:-1099447029)
expectedType: bool(), actualType: failure({error("map[set[void], real] and map[set[void], int] incomparable",|file://-|(2,47,<1,2>,<1,49>))})

[Operators41] *** Failed test for: (($2014-12-10T11:33:59.712+01:00:{false})) o (()); --- signature map[&A,&B] x map[&B,&C] -> map[&A,&C]

arg1=($2014-12-10T11:33:59.712+01:00:{false}), arg2=()
expectedType: map(datetime(),void()), actualType: failure({error("set[bool] must be a subtype of void",|file://-|(2,49,<1,2>,<1,51>))})

[Operators40] *** Failed test for: ({<$2014-10-27T13:25:58.603+01:00,0.9942142725025958>}) o ({<920025088r515335701,$2014-12-17T15:25:06.148+01:00>}); --- signature rel[&A,&B] x rel[&B,&C] -> rel[&A,&C]
arg1={<$2014-10-27T13:25:58.603+01:00,0.9942142725025958>}, arg2={<920025088r515335701,$2014-12-17T15:25:06.148+01:00>}
expectedType: rel([datetime(),datetime()]), actualType: failure({error("Range of relation rel[datetime, real] must be comparable to domain of relation rel[datetime, real]",|file://-|(2,114,<1,2>,<1,116>))})


[Operators13] *** Failed test for: ([<{}>,<{($2014-11-20T22:22:07.542+01:00:()),()}>,<{()}>,<{}>]) + ({$3048-03-31T09:54:52.618+01:00}); --- signature list[&L] x &R              		  -> list[LUB(&L,&R)] when &R is not a list
arg1=[<{}>,<{($2014-11-20T22:22:07.542+01:00:()),()}>,<{()}>,<{}>], arg2={$3048-03-31T09:54:52.618+01:00}
expectedType: list(set(value())), actualType: list(value())

[Operators39] *** Failed test for: ([<($3833-07-10T21:12:50.833+01:00:"函橥洙"()),-340332694>]) o ([<1083634677r1374722096,false>]); --- signature lrel[&A,&B] x lrel[&B,&C] -> lrel[&A,&C]
arg1=[<($3833-07-10T21:12:50.833+01:00:"函橥洙"()),-340332694>], arg2=[<1083634677r1374722096,false>]
expectedType: lrel([map(datetime(),node()),bool()]), actualType: failure({error("Range of list relation lrel[map[datetime, node], int] must be comparable to domain of list relation lrel[map[datetime, node], int]",|file://-|(2,94,<1,2>,<1,96>))})


=================

[Operators15] exp: ({<$5762-02-01T21:03:36.892+01:00>,<$6071-02-06T10:43:16.960+01:00>}) + ({});
*** Failed test: Addition + for set[&L] x set[&R]                   -> set[LUB(&L,&R)]
arg1={<$5762-02-01T21:03:36.892+01:00>,<$6071-02-06T10:43:16.960+01:00>}, arg2={}
expectedType: set(datetime()), actualType: set(tuple([datetime()]))

[Operators13] exp: ([<-1730775565r221440704>,<185262212r1039928485>]) + (0.8048692185283957);
*** Failed test: Addition + for list[&L] x &R              		  -> list[LUB(&L,&R)] when &R is not a list
arg1=[<-1730775565r221440704>,<185262212r1039928485>], arg2=0.8048692185283957
expectedType: list(num()), actualType: list(value())


[Operators39] exp: ([<"",854523776r1139532829>]) o ([<-414361332,[<0.7946712189556245>]>]);
*** Failed test: Composition o for lrel[&A,&B] x lrel[&B,&C] -> lrel[&A,&C]
arg1=[<"",854523776r1139532829>], arg2=[<-414361332,[<0.7946712189556245>]>]
expectedType: lrel([str(),lrel([real()])]), actualType: failure({error("Range of list relation lrel[str,rat] must be comparable to domain of list relation lrel[str,rat]",|file://-|(2,71,<1,2>,<1,73>))})

[Operators12] exp: ([<[<"\"\"盒",false>,<"",true>]>]) + ([]);
*** Failed test: Addition + for list[&L] x list[&R]                 -> list[LUB(&L,&R)]
arg1=[<[<"\"\"盒",false>,<"",true>]>], arg2=[]
expectedType: list(lrel([str(),bool()])), actualType: list(tuple([lrel([str(),bool()])]))

[Operators17] exp: ({[]}) + ({});
*** Failed test: Addition + for &L x set[&R]                        -> set[LUB(&L,&R)] when &L is not a list
arg1={[]}, arg2={}
expectedType: set(set(lrel([void()]))), actualType: set(list(void()))

[Operators16] exp: ({{"\"\\\"\\\"爻\"卑","\"\"⌠",""}}) + ({<-403159364>});
*** Failed test: Addition + for set[&L] x &R                        -> set[LUB(&L,&R)] when &R is not a list
arg1={{"\"\\\"\\\"爻\"卑","\"\"⌠",""}}, arg2={<-403159364>}
expectedType: set(set(value())), actualType: set(value())

[Operators30] exp: ({<"ड़"([],false)>}) & ({});
*** Failed test: Intersection & for set[&L] x set[&R]                    -> set[LUB(&L,&R)]
arg1={<"ड़"([],false)>}, arg2={}
expectedType: set(node()), actualType: rel([node()])

[2] stats: rel[lrel[node]] y = {<[<"T4x"(1138162013r941511049,"")>]>};
*** Unexpected messages: {error("Initializer type rel[lrel[node]] not assignable to variable of type rel[void]",|file://-|(18,42,<1,18>,<1,60>))}

[6] stats: rat X0 = -296542696r601583241; tuple[set[lrel[rat]]] X1 = <{[<-590800183r101765391>]}>;
*** Unexpected messages: {error("Initializer type tuple[set[lrel[rat]]] not assignable to variable of type tuple[set[void]]",|file://-|(55,33,<1,55>,<1,88>))}


[3] stats: lrel[map[void,void],datetime] X0 = [<(),$2224-06-24T15:47:49.976+01:00>]; y = [<(),$2224-06-24T15:47:49.976+01:00>];
*** Unexpected messages: {error("Initializer type lrel[map[void,void],datetime] not assignable to variable of type void",|file://-|(32,42,<1,32>,<1,74>)),error("Type lrel does not accept type parameters",|file://-|(2,29,<1,2>,<1,31>))}
[7] stats: x = -21762735r6247223; x = -868968362;
normalize: LUB(parameter("T0",value()),parameter("T1",value())), ("T1":int(),"T0":rat()) ==> num()
*** Unexpected messages: {warning("Name defined outside of current module",|file://-|(25,1,<1,25>,<1,26>))}

[3] stats: lrel[set[node]] X0 = [<{""([])}>,<{}>,<{"Uw"()}>,<{}>]; y = [<{""([])}>,<{}>,<{"Uw"()}>,<{}>];
*** Unexpected messages: {error("Initializer type lrel[set[node]] not assignable to variable of type void",|file://-|(18,38,<1,18>,<1,56>)),error("Type lrel does not accept type parameters",|file://-|(2,15,<1,2>,<1,17>))}

[7] stats: x = {<-866487913r557418040>}; x = [2002708704];
normalize: LUB(parameter("T0",value()),parameter("T1",value())), ("T1":list(int()),"T0":rel([rat()])) ==> value()
*** Unexpected messages: {warning("Name defined outside of current module",|file://-|(32,1,<1,32>,<1,33>))}

[5] stats: lrel[bool] X0 = [<true>]; lrel[bool] y = X0;
*** Unexpected messages: {error("Type lrel does not accept type parameters",|file://-|(28,10,<1,28>,<1,38>)),error("Initializer type lrel[bool] not assignable to variable of type void",|file://-|(13,13,<1,13>,<1,26>)),error("Type lrel does not accept type parameters",|file://-|(2,10,<1,2>,<1,12>))}


[6] stats: loc X0 = |tmp:///l/%E8%91%91%E0%A7%8A%E9%B0%93/F//N|; lrel[int] X1 = [<2101790434>,<-1267692336>,<1022437802>,<-282114722>,<750097681>];
*** Unexpected messages: {error("Initializer type lrel[int] not assignable to variable of type void",|file://-|(66,71,<1,66>,<1,137>)),error("Type lrel does not accept type parameters",|file://-|(56,9,<1,56>,<1,65>))}


[2] stats: lrel[map[void,void],rel[loc]] y = [<(),{<|tmp:///ixm3|>}>,<(),{<|tmp:///|>}>,<(),{<|tmp:///|>}>];
*** Unexpected messages: {error("Initializer type lrel[map[void,void],rel[loc]] not assignable to variable of type void",|file://-|(32,66,<1,32>,<1,98>)),error("Type lrel does not accept type parameters",|file://-|(2,29,<1,2>,<1,31>))}

stats = lrel[lrel[int]] y = [<[<1161855114>]>];
checkResult = <config({error("Initializer type lrel[lrel[int]] not assignable to variable of type void",|file://-|(18,22,<1,18>,<1,40>)),error("Type lrel does not accept type parameters",|file://-|(2,15,<1,2>,<1,17>))},(|file://-|(22,18,<1,22>,<1,40>):lrel([lrel([int()])]),|file://-|(23,16,<1,23>,<1,39>):tuple([lrel([int()])]),|file://-|(24,14,<1,24>,<1,38>):lrel([int()]),|file://-|(25,12,<1,25>,<1,37>):tuple([int()]),|file://-|(26,10,<1,26>,<1,36>):int()),void(),(),(RCompoundName(["CheckStatementsString","y"]):1,RSimpleName("y"):1),(),(RSimpleName("CheckStatementsString"):0),(),(),(),(1:variable(RSimpleName("y"),void()[@errinfo={error("Type lrel does not accept type parameters",|file://-|(2,15,<1,2>,<1,17>))}],false,0,|file://-|(18,1,<1,18>,<1,19>)),0:module(RSimpleName("CheckStatementsString"),|file:///tmp/CheckStatementsString.rsc|)),(),(),{},{<0,|file:///tmp/CheckStatementsString.rsc|>,<1,|file://-|(18,1,<1,18>,<1,19>)>},{},{},{},[0],[],[timing("Imported module signatures",$2013-05-11T23:45:18.153+01:00,$2013-05-11T23:45:18.154+01:00)],2,0),void()>
*** Unexpected messages: {error("Initializer type lrel[lrel[int]] not assignable to variable of type void",|file://-|(18,22,<1,18>,<1,40>)),error("Type lrel does not accept type parameters",|file://-|(2,15,<1,2>,<1,17>))}
ok


stats = map[lrel[int],int] y = ([<-536777693>]:588321726);
checkResult = <config({error("Initializer type map[lrel[int],int] not assignable to variable of type map[void,int]",|file://-|(21,30,<1,21>,<1,51>))},(|file://-|(25,26,<1,25>,<1,51>):map(lrel([int()]),int()),|file://-|(41,9,<1,41>,<1,50>):int(),|file://-|(26,14,<1,26>,<1,40>):lrel([int()]),|file://-|(27,12,<1,27>,<1,39>):tuple([int()]),|file://-|(28,10,<1,28>,<1,38>):int(),|file://-|(29,9,<1,29>,<1,38>):int()),void(),(),(RCompoundName(["CheckStatementsString","y"]):1,RSimpleName("y"):1),(),(RSimpleName("CheckStatementsString"):0),(),(),(),(1:variable(RSimpleName("y"),map(void()[@errinfo={error("Type lrel does not accept type parameters",|file://-|(6,9,<1,6>,<1,15>))}],int()),false,0,|file://-|(21,1,<1,21>,<1,22>)),0:module(RSimpleName("CheckStatementsString"),|file:///tmp/CheckStatementsString.rsc|)),(),(),{},{<1,|file://-|(21,1,<1,21>,<1,22>)>,<0,|file:///tmp/CheckStatementsString.rsc|>},{},{},{},[0],[],[timing("Imported module signatures",$2013-05-11T23:38:36.194+01:00,$2013-05-11T23:38:36.195+01:00)],2,0),void()>
*** Unexpected messages: {error("Initializer type map[lrel[int],int] not assignable to variable of type map[void,int]",|file://-|(21,30,<1,21>,<1,51>))}
ok

Named Patterns:

tst6: exp = lrel[str] N0 : [] !:= [];
*** Variable N0 unbound; expected type lrel([str()]); exp = lrel[str] N0 : [] !:= [];


==================

List variables

tst6: exp = [*L0] !:= [851568834];
Failed test: variable L0; exp = [*L0] !:= [851568834];
expectedType: list(int()), actualType: list(inferred(0))

*** No type found for variable X1; expected type int(); exp = [*L0, X1, *L2] !:= [-1552376933,1443850177,499501065,-575552971,-645347792,-1729901910,976114667,-1770131861];
Failed test: variable L2; exp = [*L0, X1, *L2] !:= [-1552376933,1443850177,499501065,-575552971,-645347792,-1729901910,976114667,-1770131861];
expectedType: list(int()), actualType: list(inferred(1))


Set variables:

Failed test: variable S0; exp = {-2025691593, *S0} !:= {619169849,-2025691593,-1426297609,2001752003};
expectedType: set(int()), actualType: set(inferred(0))

Failed test: variable S1; exp = {int X0, 1933003292, 401061244, *S1} !:= {1933003292,401061244,-1117869638,1726396136,-1314575657,1885574515};
expectedType: set(int()), actualType: set(inferred(0))




===================
*** No type found for variable X1; expected type \loc(); exp = (  true : [|tmp:///M8|, |tmp:///t|],  false : [X0, |tmp:///|, X1] ) !:= (false:[|tmp:///ijx|,|tmp:///|,|tmp:///GMyD|],true:[|tmp:///M8|,|tmp:///t|]);
*** No type found for variable X0; expected type \loc(); exp = (  true : [|tmp:///M8|, |tmp:///t|],  false : [X0, |tmp:///|, X1] ) !:= (false:[|tmp:///ijx|,|tmp:///|,|tmp:///GMyD|],true:[|tmp:///M8|,|tmp:///t|]);

*** No type found for variable X0; expected type map(void(),void()); exp = [X0, ()] !:= [(),()];
*** No type found for variable X0; expected type set(void()); exp = (  "낭㳻욓눰㴷㽋ি赼鐜" : {},  "⟇⢗䳃✱鵹⻯鶬쮎啪" : X0,  "ꡭ凄ἃ녛ﭾ၆죔퍺" : {},  "℠蠇𰠟ሰ䅫꿂홞졡" : {} ) !:= ("℠蠇𰠟ሰ䅫꿂홞졡":{},"ꡭ凄ἃ녛ﭾ၆죔퍺":{},"⟇⢗䳃✱鵹⻯鶬쮎啪":{},"낭㳻욓눰㴷㽋ি赼鐜":{});

*** No type found for variable X1; expected type real(); exp = (  X1 : real X2,  X0 : -4525.808601943666 ) !:= (-1005.3270818831134:4370.690792352587,4735.645134390046:-4525.808601943666);
*** No type found for variable X0; expected type real(); exp = (  X1 : real X2,  X0 : -4525.808601943666 ) !:= (-1005.3270818831134:4370.690792352587,4735.645134390046:-4525.808601943666);

*** No type found for variable X7; expected type node(); exp = (  $2014-01-21T01:34:20.285+01:00 : (  [[], [], [], []] : X1,  list[list[void]] X0 : node X2 ),  $2014-08-06T21:45:58.656+01:00 : map[list[list[void]],node] X3,  $2014-12-26T15:08:07.864+01:00 : (  X5 : X7,  list[list[void]] X6 : "0XF"(true),  [[], X4, []] : "欄墔"(110672843,(():-20924846r1061776549,(():[<"QL9O"()>,<"低椡ᬯ"()>]):1495804506),{},[]) ) ) !:= ($2014-01-21T01:34:20.285+01:00:([[],[]]:"Bbi"([],|tmp:///TU/hjW/gxXJ|,0.47044542824089,"\"\\\"\\\\\\\"\\\\\\\"\\\"䱜\"थ"),[[],[],[],[]]:"lE8"(<true>,0.3959995265582541)),$2014-12-26T15:08:07.864+01:00:([[],[],[]]:"欄墔"(110672843,(():-20924846r1061776549,(():[<"QL9O"()>,<"低椡ᬯ"()>]):1495804506),{},[]),[[],[]]:"1Uy9"(0.40804455111742766,|tmp:///Q|)),$2014-08-06T21:45:58.656+01:00:([]:"KPJy"(),[[],[],[]]:"g"()));
*** No type found for variable X5; expected type list(list(void())); exp = (  $2014-01-21T01:34:20.285+01:00 : (  [[], [], [], []] : X1,  list[list[void]] X0 : node X2 ),  $2014-08-06T21:45:58.656+01:00 : map[list[list[void]],node] X3,  $2014-12-26T15:08:07.864+01:00 : (  X5 : X7,  list[list[void]] X6 : "0XF"(true),  [[], X4, []] : "欄墔"(110672843,(():-20924846r1061776549,(():[<"QL9O"()>,<"低椡ᬯ"()>]):1495804506),{},[]) ) ) !:= ($2014-01-21T01:34:20.285+01:00:([[],[]]:"Bbi"([],|tmp:///TU/hjW/gxXJ|,0.47044542824089,"\"\\\"\\\\\\\"\\\\\\\"\\\"䱜\"थ"),[[],[],[],[]]:"lE8"(<true>,0.3959995265582541)),$2014-12-26T15:08:07.864+01:00:([[],[],[]]:"欄墔"(110672843,(():-20924846r1061776549,(():[<"QL9O"()>,<"低椡ᬯ"()>]):1495804506),{},[]),[[],[]]:"1Uy9"(0.40804455111742766,|tmp:///Q|)),$2014-08-06T21:45:58.656+01:00:([]:"KPJy"(),[[],[],[]]:"g"()));
*** No type found for variable X4; expected type list(void()); exp = (  $2014-01-21T01:34:20.285+01:00 : (  [[], [], [], []] : X1,  list[list[void]] X0 : node X2 ),  $2014-08-06T21:45:58.656+01:00 : map[list[list[void]],node] X3,  $2014-12-26T15:08:07.864+01:00 : (  X5 : X7,  list[list[void]] X6 : "0XF"(true),  [[], X4, []] : "欄墔"(110672843,(():-20924846r1061776549,(():[<"QL9O"()>,<"低椡ᬯ"()>]):1495804506),{},[]) ) ) !:= ($2014-01-21T01:34:20.285+01:00:([[],[]]:"Bbi"([],|tmp:///TU/hjW/gxXJ|,0.47044542824089,"\"\\\"\\\\\\\"\\\\\\\"\\\"䱜\"थ"),[[],[],[],[]]:"lE8"(<true>,0.3959995265582541)),$2014-12-26T15:08:07.864+01:00:([[],[],[]]:"欄墔"(110672843,(():-20924846r1061776549,(():[<"QL9O"()>,<"低椡ᬯ"()>]):1495804506),{},[]),[[],[]]:"1Uy9"(0.40804455111742766,|tmp:///Q|)),$2014-08-06T21:45:58.656+01:00:([]:"KPJy"(),[[],[],[]]:"g"()));
*** No type found for variable X1; expected type node(); exp = (  $2014-01-21T01:34:20.285+01:00 : (  [[], [], [], []] : X1,  list[list[void]] X0 : node X2 ),  $2014-08-06T21:45:58.656+01:00 : map[list[list[void]],node] X3,  $2014-12-26T15:08:07.864+01:00 : (  X5 : X7,  list[list[void]] X6 : "0XF"(true),  [[], X4, []] : "欄墔"(110672843,(():-20924846r1061776549,(():[<"QL9O"()>,<"低椡ᬯ"()>]):1495804506),{},[]) ) ) !:= ($2014-01-21T01:34:20.285+01:00:([[],[]]:"Bbi"([],|tmp:///TU/hjW/gxXJ|,0.47044542824089,"\"\\\"\\\\\\\"\\\\\\\"\\\"䱜\"थ"),[[],[],[],[]]:"lE8"(<true>,0.3959995265582541)),$2014-12-26T15:08:07.864+01:00:([[],[],[]]:"欄墔"(110672843,(():-20924846r1061776549,(():[<"QL9O"()>,<"低椡ᬯ"()>]):1495804506),{},[]),[[],[]]:"1Uy9"(0.40804455111742766,|tmp:///Q|)),$2014-08-06T21:45:58.656+01:00:([]:"KPJy"(),[[],[],[]]:"g"()));

*** No type found for variable X1; expected type set(map(void(),void())); exp = [<set[map[void,void]] X0>, <X1>, <{()}>, <set[map[void,void]] X2>] !:= [<{()}>,<{()}>,<{()}>,<{()}>];
*** No type found for variable X1; expected type node(); exp = (  X0 : X1 ) !:= (463610650:"Yx3"(1059988891r154153128,{<[]>},[]));
*** No type found for variable X0; expected type int(); exp = (  X0 : X1 ) !:= (463610650:"Yx3"(1059988891r154153128,{<[]>},[]));
*** No type found for variable X0; expected type str(); exp = (  X0 : -2084860183r871417765,  "䃒묻욻夐鞿䟙〜䒅ﳷ" : 9529027r51269648,  "ᛎ㛝鲥鷼䬷პ寜탬Ạ" : -96336382r277819055,  "뱐瞩矢樨詵⻺㶥薔䑱" : -1755637811r1322265184 ) !:= ("뱐瞩矢樨詵⻺㶥薔䑱":-1755637811r1322265184,"ᛎ㛝鲥鷼䬷პ寜탬Ạ":-96336382r277819055,"䃒묻욻夐鞿䟙〜䒅ﳷ":9529027r51269648,"灌렠俬娙物ጲ뿼紃퀭":-2084860183r871417765);
*** No type found for variable X0; expected type list(void()); exp = (  X0 : -156457179r63473215,  [] : 118106883r44484395 ) !:= ([]:118106883r44484395);

*** No type found for variable X4; expected type node(); exp = (  X3 : "쾆ห᧚"(),  [X1, X2] : X4,  lrel[loc,rat] X0 : "၊"($4166-06-30T10:48:50.706+01:00,$0297-10-18T06:18:25.473+01:00,{<""(<$5427-12-29T23:32:13.747+01:00>,[],-1783418130,"")>,<"㔨"()>}),  [] : "k48E"() ) !:= ([<|tmp:///gi/TL/w2|,-182141419r77675205>,<|tmp:///G|,-161634769r53125925>]:"mGJP"(),[<|tmp:///%E3%A2%8C%E7%9E%98%E5%87%96%EF%A1%97//NTy|,757961799r1258837298>,<|tmp:///ILq|,-23229987r846390278>,<|tmp:///|,-634397481r176382944>,<|tmp:///wfw|,1701071264r1191576491>]:"쾆ห᧚"(),[<|tmp:///z9e/P|,1446369951r1066422008>,<|tmp:///eUU/N7a7///DU|,-719206732r2136880051>,<|tmp:///Pm/|,562846475r281426846>,<|tmp:///CPaY|,1487375590r1995652139>]:"၊"($4166-06-30T10:48:50.706+01:00,$0297-10-18T06:18:25.473+01:00,{<""(<$5427-12-29T23:32:13.747+01:00>,[],-1783418130,"")>,<"㔨"()>}),[]:"k48E"());
*** No type found for variable X3; expected type lrel([\loc(),rat()]); exp = (  X3 : "쾆ห᧚"(),  [X1, X2] : X4,  lrel[loc,rat] X0 : "၊"($4166-06-30T10:48:50.706+01:00,$0297-10-18T06:18:25.473+01:00,{<""(<$5427-12-29T23:32:13.747+01:00>,[],-1783418130,"")>,<"㔨"()>}),  [] : "k48E"() ) !:= ([<|tmp:///gi/TL/w2|,-182141419r77675205>,<|tmp:///G|,-161634769r53125925>]:"mGJP"(),[<|tmp:///%E3%A2%8C%E7%9E%98%E5%87%96%EF%A1%97//NTy|,757961799r1258837298>,<|tmp:///ILq|,-23229987r846390278>,<|tmp:///|,-634397481r176382944>,<|tmp:///wfw|,1701071264r1191576491>]:"쾆ห᧚"(),[<|tmp:///z9e/P|,1446369951r1066422008>,<|tmp:///eUU/N7a7///DU|,-719206732r2136880051>,<|tmp:///Pm/|,562846475r281426846>,<|tmp:///CPaY|,1487375590r1995652139>]:"၊"($4166-06-30T10:48:50.706+01:00,$0297-10-18T06:18:25.473+01:00,{<""(<$5427-12-29T23:32:13.747+01:00>,[],-1783418130,"")>,<"㔨"()>}),[]:"k48E"());
*** No type found for variable X2; expected type tuple([\loc(),rat()]); exp = (  X3 : "쾆ห᧚"(),  [X1, X2] : X4,  lrel[loc,rat] X0 : "၊"($4166-06-30T10:48:50.706+01:00,$0297-10-18T06:18:25.473+01:00,{<""(<$5427-12-29T23:32:13.747+01:00>,[],-1783418130,"")>,<"㔨"()>}),  [] : "k48E"() ) !:= ([<|tmp:///gi/TL/w2|,-182141419r77675205>,<|tmp:///G|,-161634769r53125925>]:"mGJP"(),[<|tmp:///%E3%A2%8C%E7%9E%98%E5%87%96%EF%A1%97//NTy|,757961799r1258837298>,<|tmp:///ILq|,-23229987r846390278>,<|tmp:///|,-634397481r176382944>,<|tmp:///wfw|,1701071264r1191576491>]:"쾆ห᧚"(),[<|tmp:///z9e/P|,1446369951r1066422008>,<|tmp:///eUU/N7a7///DU|,-719206732r2136880051>,<|tmp:///Pm/|,562846475r281426846>,<|tmp:///CPaY|,1487375590r1995652139>]:"၊"($4166-06-30T10:48:50.706+01:00,$0297-10-18T06:18:25.473+01:00,{<""(<$5427-12-29T23:32:13.747+01:00>,[],-1783418130,"")>,<"㔨"()>}),[]:"k48E"());
*** No type found for variable X1; expected type tuple([\loc(),rat()]); exp = (  X3 : "쾆ห᧚"(),  [X1, X2] : X4,  lrel[loc,rat] X0 : "၊"($4166-06-30T10:48:50.706+01:00,$0297-10-18T06:18:25.473+01:00,{<""(<$5427-12-29T23:32:13.747+01:00>,[],-1783418130,"")>,<"㔨"()>}),  [] : "k48E"() ) !:= ([<|tmp:///gi/TL/w2|,-182141419r77675205>,<|tmp:///G|,-161634769r53125925>]:"mGJP"(),[<|tmp:///%E3%A2%8C%E7%9E%98%E5%87%96%EF%A1%97//NTy|,757961799r1258837298>,<|tmp:///ILq|,-23229987r846390278>,<|tmp:///|,-634397481r176382944>,<|tmp:///wfw|,1701071264r1191576491>]:"쾆ห᧚"(),[<|tmp:///z9e/P|,1446369951r1066422008>,<|tmp:///eUU/N7a7///DU|,-719206732r2136880051>,<|tmp:///Pm/|,562846475r281426846>,<|tmp:///CPaY|,1487375590r1995652139>]:"၊"($4166-06-30T10:48:50.706+01:00,$0297-10-18T06:18:25.473+01:00,{<""(<$5427-12-29T23:32:13.747+01:00>,[],-1783418130,"")>,<"㔨"()>}),[]:"k48E"());

*** No type found for variable X1; expected type set(void()); exp = (  X0 : X1 ) !:= ($2014-11-30T16:24:19.552+01:00:{});
*** No type found for variable X0; expected type datetime(); exp = (  X0 : X1 ) !:= ($2014-11-30T16:24:19.552+01:00:{});

*** No type found for variable X0; expected type node(); exp = (  X0 : 459577048,  "4"([<0.382591818691542,193513355r136362388,{<|tmp:///|>}>],888115620) : int X1 ) !:= ("瞚듲␙爁"("ZSVk"($6287-11-19T08:57:09.064+01:00,0.06342672159067686,$1021-03-12T12:45:19.403+01:00)):459577048,"4"([<0.382591818691542,193513355r136362388,{<|tmp:///|>}>],888115620):-2009546275);

*** No type found for variable X2; expected type datetime(); exp = (  int X1 : $4382-08-26T09:42:18.473+01:00,  int X0 : X2 ) !:= (1355201263:$6382-09-23T07:23:38.934+01:00,-1046904217:$4382-08-26T09:42:18.473+01:00);
*** Variable X1 unbound; expected type int(); exp = (  int X1 : $4382-08-26T09:42:18.473+01:00,  int X0 : X2 ) !:= (1355201263:$6382-09-23T07:23:38.934+01:00,-1046904217:$4382-08-26T09:42:18.473+01:00);

*** No type found for variable X2; expected type int(); exp = (  list[set[real]] X1 : X2,  list[set[real]] X0 : int X3,  [] : int X4 ) !:= ([{-1190.0625599080413},{3773.191445156317},{},{}]:-864511876,[]:383745318,[{-6278.392794417179},{},{-7452.742799381091}]:-1080443849);
*** No type found for variable X0; expected type map(void(),void()); exp = (  X0 : [],  () : [] ) !:= (():[]);

*** No type found for variable X3; expected type \loc(); exp = (  [<<-3397.6612887231404>>, tuple[tuple[real]] X1] : X2,  [<<8191.14565204869>>, <<-1570.2972389928455>>, <<-4985.160783789868>>, <X0>] : X3 ) !:= ([<<8191.14565204869>>,<<-1570.2972389928455>>,<<-4985.160783789868>>,<<-3883.929592468463>>]:|tmp:///4|,[<<-3397.6612887231404>>,<<8323.438364848374>>]:|tmp:///w|);
*** No type found for variable X2; expected type \loc(); exp = (  [<<-3397.6612887231404>>, tuple[tuple[real]] X1] : X2,  [<<8191.14565204869>>, <<-1570.2972389928455>>, <<-4985.160783789868>>, <X0>] : X3 ) !:= ([<<8191.14565204869>>,<<-1570.2972389928455>>,<<-4985.160783789868>>,<<-3883.929592468463>>]:|tmp:///4|,[<<-3397.6612887231404>>,<<8323.438364848374>>]:|tmp:///w|);
*** No type found for variable X0; expected type tuple([real()]); exp = (  [<<-3397.6612887231404>>, tuple[tuple[real]] X1] : X2,  [<<8191.14565204869>>, <<-1570.2972389928455>>, <<-4985.160783789868>>, <X0>] : X3 ) !:= ([<<8191.14565204869>>,<<-1570.2972389928455>>,<<-4985.160783789868>>,<<-3883.929592468463>>]:|tmp:///4|,[<<-3397.6612887231404>>,<<8323.438364848374>>]:|tmp:///w|);

*** No type found for variable X0; expected type int(); exp = (  |tmp:///MDf| : X0,  |tmp:///T/i//5F6| : -769876303,  |tmp:///M01R/t1b| : -191868390 ) !:= (|tmp:///T/i//5F6|:-769876303,|tmp:///MDf|:842034802,|tmp:///M01R/t1b|:-191868390);

*** Variable X0 unbound; expected type node(); exp = (  node X0 : $2276-07-03T14:49:38.374+01:00,  "Nk"(0.6125514315966774,-1270142825,|tmp:///hA|) : datetime X1 ) !:= ("Nk"(0.6125514315966774,-1270142825,|tmp:///hA|):$3313-09-15T12:26:48.618+01:00,"pWjs"(|tmp:///h9/%ED%90%A0|,$4781-12-02T05:44:36.006+01:00,{<-439100735,1419509183>},0.3514272466816044):$2276-07-03T14:49:38.374+01:00);

*** No type found for variable X3; expected type tuple([rat()]); exp = (  [<-687871092>] : X3,  X0 : <1436555720r1667645243>,  [tuple[int] X1, X2, <2139156147>] : <420173925r1440693959>,  [] : tuple[rat] X4 ) !:= ([<-1845775949>,<1621884309>,<2139156147>]:<420173925r1440693959>,[<-687871092>]:<-382064006r606065995>,[]:<170934822r174416275>);
*** No type found for variable X2; expected type tuple([int()]); exp = (  [<-687871092>] : X3,  X0 : <1436555720r1667645243>,  [tuple[int] X1, X2, <2139156147>] : <420173925r1440693959>,  [] : tuple[rat] X4 ) !:= ([<-1845775949>,<1621884309>,<2139156147>]:<420173925r1440693959>,[<-687871092>]:<-382064006r606065995>,[]:<170934822r174416275>);
*** No type found for variable X0; expected type lrel([int()]); exp = (  [<-687871092>] : X3,  X0 : <1436555720r1667645243>,  [tuple[int] X1, X2, <2139156147>] : <420173925r1440693959>,  [] : tuple[rat] X4 ) !:= ([<-1845775949>,<1621884309>,<2139156147>]:<420173925r1440693959>,[<-687871092>]:<-382064006r606065995>,[]:<170934822r174416275>);

*** No type found for variable X4; expected type lrel([real()]); exp = (  "딋쐚ᓿᘎ䲱坂邶㛕飇" : [<-6560.455017092734>, X1, <X2>, tuple[real] X3],  X0 : X4,  "⿄փ䳒ڱ↬Ḵ랷➓쟺" : [<-9894.526591680657>, <-2149.5129250473847>, <real X5>, <-4036.661372773815>] ) !:= ("⿄փ䳒ڱ↬Ḵ랷➓쟺":[<-9894.526591680657>,<-2149.5129250473847>,<6996.958464039122>,<-4036.661372773815>],"ꎃ睰쵓ፊㅠ폕艉핍":[<667.5345897352763>],"딋쐚ᓿᘎ䲱坂邶㛕飇":[<-6560.455017092734>,<-6571.78090947282>,<-107.51799988257335>,<-4154.085691067128>]);
*** No type found for variable X2; expected type real(); exp = (  "딋쐚ᓿᘎ䲱坂邶㛕飇" : [<-6560.455017092734>, X1, <X2>, tuple[real] X3],  X0 : X4,  "⿄փ䳒ڱ↬Ḵ랷➓쟺" : [<-9894.526591680657>, <-2149.5129250473847>, <real X5>, <-4036.661372773815>] ) !:= ("⿄փ䳒ڱ↬Ḵ랷➓쟺":[<-9894.526591680657>,<-2149.5129250473847>,<6996.958464039122>,<-4036.661372773815>],"ꎃ睰쵓ፊㅠ폕艉핍":[<667.5345897352763>],"딋쐚ᓿᘎ䲱坂邶㛕飇":[<-6560.455017092734>,<-6571.78090947282>,<-107.51799988257335>,<-4154.085691067128>]);
*** No type found for variable X1; expected type tuple([real()]); exp = (  "딋쐚ᓿᘎ䲱坂邶㛕飇" : [<-6560.455017092734>, X1, <X2>, tuple[real] X3],  X0 : X4,  "⿄փ䳒ڱ↬Ḵ랷➓쟺" : [<-9894.526591680657>, <-2149.5129250473847>, <real X5>, <-4036.661372773815>] ) !:= ("⿄փ䳒ڱ↬Ḵ랷➓쟺":[<-9894.526591680657>,<-2149.5129250473847>,<6996.958464039122>,<-4036.661372773815>],"ꎃ睰쵓ፊㅠ폕艉핍":[<667.5345897352763>],"딋쐚ᓿᘎ䲱坂邶㛕飇":[<-6560.455017092734>,<-6571.78090947282>,<-107.51799988257335>,<-4154.085691067128>]);
*** No type found for variable X0; expected type str(); exp = (  "딋쐚ᓿᘎ䲱坂邶㛕飇" : [<-6560.455017092734>, X1, <X2>, tuple[real] X3],  X0 : X4,  "⿄փ䳒ڱ↬Ḵ랷➓쟺" : [<-9894.526591680657>, <-2149.5129250473847>, <real X5>, <-4036.661372773815>] ) !:= ("⿄փ䳒ڱ↬Ḵ랷➓쟺":[<-9894.526591680657>,<-2149.5129250473847>,<6996.958464039122>,<-4036.661372773815>],"ꎃ睰쵓ፊㅠ폕艉핍":[<667.5345897352763>],"딋쐚ᓿᘎ䲱坂邶㛕飇":[<-6560.455017092734>,<-6571.78090947282>,<-107.51799988257335>,<-4154.085691067128>]);

*** No type found for variable X3; expected type rel([set(void())]); exp = (  ["宋寠힀쥅"("sv4"({<("喘誖"():320490343r84540820)>,<()>},985714003r12865758,{"\"\\\"\\\"蓂\"䀯","","\"\"㎐"}),true), ""(false,[]), "𘎿"(0.3189612506744066,[],"sI4"(2034628753r780645329),$2913-05-28T10:24:40.516+01:00)] : X3,  list[node] X1 : {},  ["䛗"(), X0, "餂"([<$0748-10-31T14:41:31.729+01:00,{"4"(-1614051016r1394332661,$5348-12-04T21:31:05.468+01:00,-1485051391r1937351174)}>,<$3626-04-22T02:03:17.910+01:00,{"颅￰"()}>],$1538-04-12T15:32:55.705+01:00,{},323142916r1447720779), "jUe"()] : {tuple[set[void]] X4},  [""(971694809r758573141,{<0.7403469695291763>,<0.26781866133958987>},1821067049r1689244333,$0538-12-25T19:03:33.879+01:00), "2QD"(), ""({},-440709330r131772703,"᳠귋싖"(-1877277949,(),[]),[]), X2] : {<{}>} ) !:= (["宋寠힀쥅"("sv4"({<("喘誖"():320490343r84540820)>,<()>},985714003r12865758,{"\"\\\"\\\"蓂\"䀯","","\"\"㎐"}),true),""(false,[]),"𘎿"(0.3189612506744066,[],"sI4"(2034628753r780645329),$2913-05-28T10:24:40.516+01:00)]:{<{}>},[""(-571599176,0.518789515030921,0.43002320827243035,0.14681477471735083),"䙂超ᘅ"(),"Afg"({},[|tmp:///x1|,|tmp:///JR/G|,|tmp:///3R|,|tmp:///|],(),$6799-04-12T23:59:52.911+01:00)]:{},["䛗"(),"n"("붖"(18124799r216820477),1177532903,1284615935r1196250703),"餂"([<$0748-10-31T14:41:31.729+01:00,{"4"(-1614051016r1394332661,$5348-12-04T21:31:05.468+01:00,-1485051391r1937351174)}>,<$3626-04-22T02:03:17.910+01:00,{"颅￰"()}>],$1538-04-12T15:32:55.705+01:00,{},323142916r1447720779),"jUe"()]:{<{}>},[""(971694809r758573141,{<0.7403469695291763>,<0.26781866133958987>},1821067049r1689244333,$0538-12-25T19:03:33.879+01:00),"2QD"(),""({},-440709330r131772703,"᳠귋싖"(-1877277949,(),[]),[]),"ﷂ눽"({},[],|tmp:///v7kx//7vej/Mwd|,$0890-07-12T10:15:10.653+01:00)]:{<{}>});
*** No type found for variable X2; expected type node(); exp = (  ["宋寠힀쥅"("sv4"({<("喘誖"():320490343r84540820)>,<()>},985714003r12865758,{"\"\\\"\\\"蓂\"䀯","","\"\"㎐"}),true), ""(false,[]), "𘎿"(0.3189612506744066,[],"sI4"(2034628753r780645329),$2913-05-28T10:24:40.516+01:00)] : X3,  list[node] X1 : {},  ["䛗"(), X0, "餂"([<$0748-10-31T14:41:31.729+01:00,{"4"(-1614051016r1394332661,$5348-12-04T21:31:05.468+01:00,-1485051391r1937351174)}>,<$3626-04-22T02:03:17.910+01:00,{"颅￰"()}>],$1538-04-12T15:32:55.705+01:00,{},323142916r1447720779), "jUe"()] : {tuple[set[void]] X4},  [""(971694809r758573141,{<0.7403469695291763>,<0.26781866133958987>},1821067049r1689244333,$0538-12-25T19:03:33.879+01:00), "2QD"(), ""({},-440709330r131772703,"᳠귋싖"(-1877277949,(),[]),[]), X2] : {<{}>} ) !:= (["宋寠힀쥅"("sv4"({<("喘誖"():320490343r84540820)>,<()>},985714003r12865758,{"\"\\\"\\\"蓂\"䀯","","\"\"㎐"}),true),""(false,[]),"𘎿"(0.3189612506744066,[],"sI4"(2034628753r780645329),$2913-05-28T10:24:40.516+01:00)]:{<{}>},[""(-571599176,0.518789515030921,0.43002320827243035,0.14681477471735083),"䙂超ᘅ"(),"Afg"({},[|tmp:///x1|,|tmp:///JR/G|,|tmp:///3R|,|tmp:///|],(),$6799-04-12T23:59:52.911+01:00)]:{},["䛗"(),"n"("붖"(18124799r216820477),1177532903,1284615935r1196250703),"餂"([<$0748-10-31T14:41:31.729+01:00,{"4"(-1614051016r1394332661,$5348-12-04T21:31:05.468+01:00,-1485051391r1937351174)}>,<$3626-04-22T02:03:17.910+01:00,{"颅￰"()}>],$1538-04-12T15:32:55.705+01:00,{},323142916r1447720779),"jUe"()]:{<{}>},[""(971694809r758573141,{<0.7403469695291763>,<0.26781866133958987>},1821067049r1689244333,$0538-12-25T19:03:33.879+01:00),"2QD"(),""({},-440709330r131772703,"᳠귋싖"(-1877277949,(),[]),[]),"ﷂ눽"({},[],|tmp:///v7kx//7vej/Mwd|,$0890-07-12T10:15:10.653+01:00)]:{<{}>});
*** No type found for variable X0; expected type node(); exp = (  ["宋寠힀쥅"("sv4"({<("喘誖"():320490343r84540820)>,<()>},985714003r12865758,{"\"\\\"\\\"蓂\"䀯","","\"\"㎐"}),true), ""(false,[]), "𘎿"(0.3189612506744066,[],"sI4"(2034628753r780645329),$2913-05-28T10:24:40.516+01:00)] : X3,  list[node] X1 : {},  ["䛗"(), X0, "餂"([<$0748-10-31T14:41:31.729+01:00,{"4"(-1614051016r1394332661,$5348-12-04T21:31:05.468+01:00,-1485051391r1937351174)}>,<$3626-04-22T02:03:17.910+01:00,{"颅￰"()}>],$1538-04-12T15:32:55.705+01:00,{},323142916r1447720779), "jUe"()] : {tuple[set[void]] X4},  [""(971694809r758573141,{<0.7403469695291763>,<0.26781866133958987>},1821067049r1689244333,$0538-12-25T19:03:33.879+01:00), "2QD"(), ""({},-440709330r131772703,"᳠귋싖"(-1877277949,(),[]),[]), X2] : {<{}>} ) !:= (["宋寠힀쥅"("sv4"({<("喘誖"():320490343r84540820)>,<()>},985714003r12865758,{"\"\\\"\\\"蓂\"䀯","","\"\"㎐"}),true),""(false,[]),"𘎿"(0.3189612506744066,[],"sI4"(2034628753r780645329),$2913-05-28T10:24:40.516+01:00)]:{<{}>},[""(-571599176,0.518789515030921,0.43002320827243035,0.14681477471735083),"䙂超ᘅ"(),"Afg"({},[|tmp:///x1|,|tmp:///JR/G|,|tmp:///3R|,|tmp:///|],(),$6799-04-12T23:59:52.911+01:00)]:{},["䛗"(),"n"("붖"(18124799r216820477),1177532903,1284615935r1196250703),"餂"([<$0748-10-31T14:41:31.729+01:00,{"4"(-1614051016r1394332661,$5348-12-04T21:31:05.468+01:00,-1485051391r1937351174)}>,<$3626-04-22T02:03:17.910+01:00,{"颅￰"()}>],$1538-04-12T15:32:55.705+01:00,{},323142916r1447720779),"jUe"()]:{<{}>},[""(971694809r758573141,{<0.7403469695291763>,<0.26781866133958987>},1821067049r1689244333,$0538-12-25T19:03:33.879+01:00),"2QD"(),""({},-440709330r131772703,"᳠귋싖"(-1877277949,(),[]),[]),"ﷂ눽"({},[],|tmp:///v7kx//7vej/Mwd|,$0890-07-12T10:15:10.653+01:00)]:{<{}>});


=====================
loc is not yet allowed in patterns!

tst6: exp = {tuple[list[void],set[lrel[node]]] X0, <X7, {[<node X8>, tuple[node] X9, <"එ"(false,1158442189,true,"\"\"")>], lrel[node] X11, lrel[node] X13, [<"뺶∵"(|tmp:///VI5|,true,"u87"({}),129557955r108000599)>, <"j3rC"({},-892377692,"\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"浇\\\\\\\"⎡\\\"蠫\"ﮬ")>, <"鉭㚺"(1881875137r299283883)>]}>, <[], {X14, lrel[node] X15, [<""([],413757891,215952691,{})>, <node X17>, tuple[node] X18, <"M6ES"(0.9330336859915586,-77012288,"\"\"勊")>]}>} := {<[],{[<"哒꺲"()>],[<""([],413757891,215952691,{})>,<""()>,<"2R"(<-1307162491r1513792488>,([]:[]),|tmp:///SZ14/O/|)>,<"M6ES"(0.9330336859915586,-77012288,"\"\"勊")>],[]}>,<[],{[<""(true)>,<"XKq"(56354545r236810211,true)>,<"찺嗇"({})>],[<"媽ᔆ㝢"({},[[],[|tmp:///%EB%BE%B3%EE%A6%92%E3%9B%93%EF%8D%A3|,|tmp:///|]],109901381r40583382)>,<"繁୛⅛"(-184271722)>,<"sf"(())>,<""("誁꫃䵔뤁"(),|tmp:///sv//zUS/i0|,2061165871r1965704049,$5429-07-21T19:01:23.040+01:00)>],[<"ꗝנ쎫"(<|tmp:///3/Lmw|,0.12294956538465407>)>,<""((),{},[],1928063552)>,<"oY"("\"\\\"\\\"荔\"蝨")>]}>,<[],{[<"9F"()>],[<"햾ﳇ쉼"($0503-11-13T16:23:54.874+01:00,[],false)>,<"Hck"({<1519291163,0.5527639565433182,|tmp:///g/%E2%B0%95%E2%BC%BF%E1%92%96%E9%A4%8B|>,<765800270,0.8907030982169885,|tmp:///|>})>,<"එ"(false,1158442189,true,"\"\"")>],[<"뺶∵"(|tmp:///VI5|,true,"u87"({}),129557955r108000599)>,<"j3rC"({},-892377692,"\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"浇\\\\\\\"⎡\\\"蠫\"ﮬ")>,<"鉭㚺"(1881875137r299283883)>],[]}>};
*** Variable X1 unbound; exp = {tuple[list[void],set[lrel[node]]] X0, <X7, {[<node X8>, tuple[node] X9, <"එ"(false,1158442189,true,"\"\"")>], lrel[node] X11, lrel[node] X13, [<"뺶∵"(|tmp:///VI5|,true,"u87"({}),129557955r108000599)>, <"j3rC"({},-892377692,"\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"浇\\\\\\\"⎡\\\"蠫\"ﮬ")>, <"鉭㚺"(1881875137r299283883)>]}>, <[], {X14, lrel[node] X15, [<""([],413757891,215952691,{})>, <node X17>, tuple[node] X18, <"M6ES"(0.9330336859915586,-77012288,"\"\"勊")>]}>} := {<[],{[<"哒꺲"()>],[<""([],413757891,215952691,{})>,<""()>,<"2R"(<-1307162491r1513792488>,([]:[]),|tmp:///SZ14/O/|)>,<"M6ES"(0.9330336859915586,-77012288,"\"\"勊")>],[]}>,<[],{[<""(true)>,<"XKq"(56354545r236810211,true)>,<"찺嗇"({})>],[<"媽ᔆ㝢"({},[[],[|tmp:///%EB%BE%B3%EE%A6%92%E3%9B%93%EF%8D%A3|,|tmp:///|]],109901381r40583382)>,<"繁୛⅛"(-184271722)>,<"sf"(())>,<""("誁꫃䵔뤁"(),|tmp:///sv//zUS/i0|,2061165871r1965704049,$5429-07-21T19:01:23.040+01:00)>],[<"ꗝנ쎫"(<|tmp:///3/Lmw|,0.12294956538465407>)>,<""((),{},[],1928063552)>,<"oY"("\"\\\"\\\"荔\"蝨")>]}>,<[],{[<"9F"()>],[<"햾ﳇ쉼"($0503-11-13T16:23:54.874+01:00,[],false)>,<"Hck"({<1519291163,0.5527639565433182,|tmp:///g/%E2%B0%95%E2%BC%BF%E1%92%96%E9%A4%8B|>,<765800270,0.8907030982169885,|tmp:///|>})>,<"එ"(false,1158442189,true,"\"\"")>],[<"뺶∵"(|tmp:///VI5|,true,"u87"({}),129557955r108000599)>,<"j3rC"({},-892377692,"\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"浇\\\\\\\"⎡\\\"蠫\"ﮬ")>,<"鉭㚺"(1881875137r299283883)>],[]}>};
ok

rascal>{tuple[list[void],set[lrel[node]]] X0, <X7, {[<node X8>, tuple[node] X9, <"එ"(false,1158442189,true,"\"\"")>], lrel[node] X11, lrel[node] X13, [<"뺶∵"(|tmp:///VI5|,true,"u87"({}),129557955r108000599)>, <"j3rC"({},-892377692,"\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"浇\\\\\\\"⎡\\\"蠫\"ﮬ")>, <"鉭㚺"(1881875137r299283883)>]}>, <[], {X14, lrel[node] X15, [<""([],413757891,215952691,{})>, <node X17>, tuple[node] X18, <"M6ES"(0.9330336859915586,-77012288,"\"\"勊")>]}>} := {<[],{[<"哒꺲"()>],[<""([],413757891,215952691,{})>,<""()>,<"2R"(<-1307162491r1513792488>,([]:[]),|tmp:///SZ14/O/|)>,<"M6ES"(0.9330336859915586,-77012288,"\"\"勊")>],[]}>,<[],{[<""(true)>,<"XKq"(56354545r236810211,true)>,<"찺嗇"({})>],[<"媽ᔆ㝢"({},[[],[|tmp:///%EB%BE%B3%EE%A6%92%E3%9B%93%EF%8D%A3|,|tmp:///|]],109901381r40583382)>,<"繁୛⅛"(-184271722)>,<"sf"(())>,<""("誁꫃䵔뤁"(),|tmp:///sv//zUS/i0|,2061165871r1965704049,$5429-07-21T19:01:23.040+01:00)>],[<"ꗝנ쎫"(<|tmp:///3/Lmw|,0.12294956538465407>)>,<""((),{},[],1928063552)>,<"oY"("\"\\\"\\\"荔\"蝨")>]}>,<[],{[<"9F"()>],[<"햾ﳇ쉼"($0503-11-13T16:23:54.874+01:00,[],false)>,<"Hck"({<1519291163,0.5527639565433182,|tmp:///g/%E2%B0%95%E2%BC%BF%E1%92%96%E9%A4%8B|>,<765800270,0.8907030982169885,|tmp:///|>})>,<"එ"(false,1158442189,true,"\"\"")>],[<"뺶∵"(|tmp:///VI5|,true,"u87"({}),129557955r108000599)>,<"j3rC"({},-892377692,"\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"浇\\\\\\\"⎡\\\"蠫\"ﮬ")>,<"鉭㚺"(1881875137r299283883)>],[]}>};
|stdin:///|(152,12,<1,152>,<1,164>): AST debug info: org.rascalmpl.semantics.dynamic.Literal$Location at |stdin:///|(152,12,<1,152>,<1,164>) is not allowed in patterns

=====================
Pattern is incorrect, well-spotted by type checker!

tst6: exp =  list[void] X0 : <{}> := ([]:<{}>);
checkResult = <config({error("Cannot assign pattern of type tuple[set[void]] to non-inferred variable of type list[void]",|file://-|(3,20,<1,3>,<1,23>))},(|file://-|(3,34,<1,3>,<1,37>):failure({error("Cannot assign pattern of type tuple[set[void]] to non-inferred variable of type list[void]",|file://-|(3,20,<1,3>,<1,23>))}),|file://-|(3,33,<1,3>,<1,36>):failure({error("Cannot assign pattern of type tuple[set[void]] to non-inferred variable of type list[void]",|file://-|(3,20,<1,3>,<1,23>))}),|file://-|(27,9,<1,27>,<1,36>):map(list(void()),tuple([set(void())])),|file://-|(31,4,<1,31>,<1,35>):tuple([set(void())]),|file://-|(32,2,<1,32>,<1,34>):set(void()),|file://-|(28,2,<1,28>,<1,30>):list(void())),void(),(),(),(),(RSimpleName("CheckStatementsString"):0),(),(),(),(1:booleanScope(0,|file://-|(3,33,<1,3>,<1,36>)),0:module(RSimpleName("CheckStatementsString"),|file:///tmp/CheckStatementsString.rsc|)),(),(),{},{<0,|file:///tmp/CheckStatementsString.rsc|>},{},{},{},[0],[],[timing("Imported module signatures",$2013-05-03T22:50:13.295+01:00,$2013-05-03T22:50:13.295+01:00)],2,0),failure({error("Cannot assign pattern of type tuple[set[void]] to non-inferred variable of type list[void]",|file://-|(3,20,<1,3>,<1,23>))})>
pvars = ()
Variable X0 unbound; exp =  list[void] X0 : <{}> := ([]:<{}>);

=====================
"<#loc>" gives "\loc()" instead of "loc"
=====================
Ambiguities:
	-1 := -1
	-1.5 := -1.5
	-1r2 := -1r2
=====================

Failed test: Intersection & for map[&K1,&V1] x map[&K2,&V2]          -> map[LUB(&K1,&K2), LUB(&V1,&V2)]
                                                           
arg1=(), arg2=(""():[|tmp:///Mx|,|tmp:///%E7%9E%B8%EF%BD%9A|])
expectedType: map(node(),list(\loc())), actualType: failure({error("Intersection not defined on map[void,void] and map[node,list[\\loc()]]",|file://-|(2,57,<1,2>,<1,59>))})

Failed test: Intersection & for set[&L] x set[&R]                    -> set[LUB(&L,&R)]
arg1={<0.17682382260042218>}, arg2={}
expectedType: set(real()), actualType: set(tuple([real()]))

Failed test: Closure + for lrel[&L,&L]			-> lrel[&L,&L]
arg1=[]
expectedType: lrel([void(),void()]), actualType: failure({error("Invalid type: expected a binary relation, found list[void]",|file://-|(2,4,<1,2>,<1,6>))})

Failed test: Composition o for lrel[&A,&B] x lrel[&B,&C] -> lrel[&A,&C]
arg1=[], arg2=[]
expectedType: lrel([void(),void()]), actualType: failure({error("Composition not defined for list[void] and list[void]",|file://-|(2,11,<1,2>,<1,13>))})

Failed test: Closure * for rel[&L,&L]  			-> rel[&L,&L]
                                                     
arg1={}
expectedType: rel([void(),void()]), actualType: failure({error("Invalid type: expected a binary relation, found set[void]",|file://-|(2,4,<1,2>,<1,6>))})

Failed test: Closure * for lrel[&L,&L]			-> lrel[&L,&L]
arg1=[]
expectedType: lrel([void(),void()]), actualType: failure({error("Invalid type: expected a binary relation, found list[void]",|file://-|(2,4,<1,2>,<1,6>))})

Failed test: Closure + for rel[&L,&L]  			-> rel[&L,&L]
                                                     
arg1={}
expectedType: rel([void(),void()]), actualType: failure({error("Invalid type: expected a binary relation, found set[void]",|file://-|(2,4,<1,2>,<1,6>))})

Failed test: Addition + for &L x set[&R]                        -> set[LUB(&L,&R)] when &L is not a list
arg1=({[<<1730960656>>,<<-1152878543>>]}:false,{[]}:true,{}:false), arg2={}
expectedType: set(map(set(lrel([tuple([int()])])),bool())), actualType: failure({error("Addition not defined on map[set[list[tuple[tuple[int]]]],bool] and set[void]",|file://-|(2,70,<1,2>,<1,72>))})

Failed test: Difference - for map[&K1,&V1] x map[&K2,&V2]          -> map[LUB(&K1,&K2), LUB(&V1,&V2)]
                                                           
arg1=(0.8082493190392922:436690239r313838005,0.539132275972856:913123987r1768325693), arg2=(1304848789:-425204936r582663053)
expectedType: map(num(),rat()), actualType: failure({error("Map of type map[real,rat] could never contain a sub-map of type map[int,rat]",|file://-|(2,119,<1,2>,<1,121>))})

Failed test: Product * for list[&L] x list[&R]                  -> lrel[&L,&R]
arg1=[<"믤甸纥"(<"挝"(true)>)>], arg2=[<""({<|tmp:///|>},($5203-11-26T15:32:41.059+01:00:1776803065r1501546196),|tmp:///H3|,"꼨瓰"("",|tmp:///A|,|tmp:///%EA%B7%A8%EF%A1%A5|)),false>,<""(-1681473418),true>,<"w"($2014-07-08T22:15:14.338+01:00,-1288831941),true>,<""(),false>]
expectedType: lrel([node(),tuple([node(),bool()])]), actualType: lrel([tuple([node()]),tuple([node(),bool()])])

Failed test: Composition o for map[&A,&B] x map[&B,&C] -> map[&A,&C]
                                                           
arg1=(([0.8827919043633843,0.9047998550528499]:0.05373933544663201):"6na"(2108661891r810489298,[],0.5520309023784599),():"󪀋"($1451-04-02T02:26:41.655+01:00)), arg2=()
expectedType: map(map(list(real()),real()),void()), actualType: failure({error("node must be a subtype of void",|file://-|(2,161,<1,2>,<1,163>))})

Failed test: Composition o for rel[&A,&B] x rel[&B,&C] -> rel[&A,&C]
arg1={<20950907r1820145559,3790469r16525289>}, arg2={}
expectedType: rel([rat(),void()]), actualType: failure({error("Composition not defined for rel[rat,rat] and set[void]",|file://-|(2,49,<1,2>,<1,51>))})
