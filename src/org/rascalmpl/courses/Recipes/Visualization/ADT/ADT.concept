# ADT

.Synopsis
Visualize an Algebraic Datatype as a tree.

.Syntax

.Types

.Function

.Details

.Description
In <<ColoredTrees>> we have discussed the Algebraic Data Type `ColoredTree`.
Here we show how to create a visualization for them. The global approach is:

*  Define a function `visColoredTree` that has a ColoredTree as argument and 
  creates a `Figure` for it.
*  Display the resulting figure using [$Rascal:Render/render].

.Examples
Here is our solution:
[source,rascal]
----
include::{LibDir}demo/vis/VisADT.rsc[tags=module]
----

<1> A `leaf` is represented as its number converted to text, surrounded by a lightyellow box.
<2> The figure for non-leaf nodes of a ColoredTree is generated by the auxiliary function `visNode`.
<3> `visNode` represents the node itself as a [$Rascal:Figures/tree] that has a colored ellipse as root and the visualization of
    two ColoredTrees as children.


For the example `ColoredTree` `rb` we can set a standard 
(see link:/Libraries#std[]) link:/Libraries#Properties-size[size] and standard link:/Libraries#Properties-gap[gap]:
[source,rascal-figure,width=,height=,file=a1.png]
----
                import demo::vis::VisADT;
render(space(visColoredTree(rb), std(size(30)), std(gap(30))));
----
and the result is:


image::{concept}/a1.png[alt="a1"]


Note that:

*  We place the Figure that is produced by `viscoloredTree` in a `space` for the sole purpose that add extra proerties to it.
*  We use `std(size(30))` and ` std(gap(30))` to achieve that these properties are set for all subfigures.


Some further custumizations are possible. By default, the tree visualization 
uses link:/Libraries#Properties-manhattan[manhattan] style. If we turn it off
[source,rascal-figure,width=,height=,file=a2.png]
----
                import demo::vis::VisADT;
render(space(visColoredTree(rb), std(size(30)), std(gap(30)), std(manhattan(false))));
----
the result is:


image::{concept}/a2.png[alt="a2"]


It is also possible to change the link:/Libraries#Properties-orientation[orientation] of the tree and draw it, for example, from left to right:
[source,rascal-figure,width=,height=,file=a3.png]
----
                import demo::vis::VisADT;
render(space(visColoredTree(rb), std(size(30)), std(gap(30)), std(orientation(leftRight()))));
----
the result is:


image::{concept}/a3.png[alt="a3"]


.Benefits

.Pitfalls

