course("Tutor",["\<a href=\"/Tutor/Tutor.html\"\>Tutor\</a\>/\<a href=\"/Tutor/Markup/Markup.html\"\>Markup\</a\>/\<a href=\"/Tutor/Markup/StructureMarkup/StructureMarkup.html\"\>StructureMarkup\</a\>/\<a href=\"/Tutor/Markup/StructureMarkup/warning/warning.html\"\>warning\</a\>: This is an example warning"],("Tutor/Markup/SourceCodeMarkup":concept("Tutor/Markup/SourceCodeMarkup",[],["DocAnnotations"],{},[]),"Tutor/Markup/QuestionMarkup/Value":concept("Tutor/Markup/QuestionMarkup/Value",[],[],{":","QValue"},[tvQuestion("Tutor/Markup/QuestionMarkup/Value","1",valueOfExpr(),details(" ",[],"","","\<A:set[int]\> + \<B:same[A]\>","",false,false,[<"A",set(int(-20,20),1,5)>,<"B",same("A")>],[],void(),"")),tvQuestion("Tutor/Markup/QuestionMarkup/Value","2",valueOfExpr(),details(" ",["import List;"],"","","size(\<A:list[int]\>) == ","",false,true,[<"A",list(int(-20,20),1,5)>],[],void(),"")),tvQuestion("Tutor/Markup/QuestionMarkup/Value","3",valueOfExpr(),details(" ",[],"","","\<A\> + "," == \<C\>",false,true,[<"A",set(arb(0,[int(-20,20),str()]),1,5)>,<"B",same("A")>],[<"C","\<A\> + \<B\>">],void(),"\<B\>")),tvQuestion("Tutor/Markup/QuestionMarkup/Value","4",valueOfExpr(),details(" Return the strings that contain \"o\".\n",[],"text = [\"andra\", \"moi\", \"ennepe\", \"Mousa\", \"polutropon\"];\npublic list[str] find(list[str] text){\n  return \n    for(s \<- text)\n      if(/o/ := s)\n        ",";\n}\n","find(text) == [\"moi\", \"Mousa\", \"polutropon\"];","",true,false,[],[],void(),""))]),"Tutor/Markup/StructureMarkup/TableOfContents":concept("Tutor/Markup/StructureMarkup/TableOfContents",[],[],{"\>","\<","toc"},[]),"Tutor/Concept/Pitfalls":concept("Tutor/Concept/Pitfalls",[],[],{"Pitfalls",":"},[]),"Tutor/Markup/InlineMarkup/Variable":concept("Tutor/Markup/InlineMarkup/Variable",[],[],{"VarName","Index","Varname"},[]),"Tutor/Markup/QuestionMarkup":concept("Tutor/Markup/QuestionMarkup",[],["TypeDescriptor","Text"],{},[]),"Tutor/Markup/StructureMarkup/warning":concept("Tutor/Markup/StructureMarkup/warning",["This is an example warning"],[],{"\>","warning","\<","\</"},[]),"Tutor/Maintenance":concept("Tutor/Maintenance",[],[],{},[]),"Tutor/Concept/Function":concept("Tutor/Concept/Function",[],[],{":","Function"},[]),"Tutor/Markup/StructureMarkup/NamedParagraph":concept("Tutor/Markup/StructureMarkup/NamedParagraph",[],[],{"===","====","=="},[]),"Tutor/Maintenance/Adding":concept("Tutor/Maintenance/Adding",[],[],{},[]),"Tutor/Markup/QuestionMarkup/Choice":concept("Tutor/Markup/QuestionMarkup/Choice",[],[],{":","QChoice"},[choiceQuestion("Tutor/Markup/QuestionMarkup/Choice","Faster","  Which means of transportation is faster?\n",[good("High speed train"),bad("Apache Helicopter"),bad("Ferrari F430"),bad("Hovercraft")])]),"Tutor/Concept/Synopsis":concept("Tutor/Concept/Synopsis",[],[],{":","Synopsis"},[]),"Tutor/Markup/StructureMarkup/BulletLists":concept("Tutor/Markup/StructureMarkup/BulletLists",[],[],{"***","*","**"},[]),"Tutor/Markup/StructureMarkup/NewParagraph":concept("Tutor/Markup/StructureMarkup/NewParagraph",[],[],{},[]),"Tutor/Markup/InlineMarkup/Callout":concept("Tutor/Markup/InlineMarkup/Callout",[],[],{},[]),"Tutor/Markup/InlineMarkup/Italic":concept("Tutor/Markup/InlineMarkup/Italic",[],[],{"_"},[]),"Tutor/Markup/InlineMarkup":concept("Tutor/Markup/InlineMarkup",[],[],{},[]),"Tutor/Markup/StructureMarkup":concept("Tutor/Markup/StructureMarkup",[],[],{},[]),"Tutor/Markup/InlineMarkup/Code":concept("Tutor/Markup/InlineMarkup/Code",[],[],{},[]),"Tutor/Concept/Questions":concept("Tutor/Concept/Questions",[],[],{"Questions",",",":"},[]),"Tutor/Concept/Name":concept("Tutor/Concept/Name",[],[],{"Name",":"},[]),"Tutor/Concept/Examples":concept("Tutor/Concept/Examples",[],[],{":","Examples"},[]),"Tutor/Markup/InlineMarkup/ExternalURL":concept("Tutor/Markup/InlineMarkup/ExternalURL",[],[],{"](","[",")"},[]),"Tutor/Markup/StructureMarkup/listing":concept("Tutor/Markup/StructureMarkup/listing",[],[],{"`\<","listing","#","\>`"},[]),"Tutor/Markup/InlineMarkup/ReferenceToConcept":concept("Tutor/Markup/InlineMarkup/ReferenceToConcept",[],[],{"]","[",":"},[]),"Tutor/Concept/Details":concept("Tutor/Concept/Details",[],[],{",",":","Details"},[]),"Tutor/Markup":concept("Tutor/Markup",[],["InlineMarkup","StructureMarkup","QuestionMarkup"],{},[]),"Tutor/Authoring":concept("Tutor/Authoring",[],[],{},[]),"Tutor/Markup/SourceCodeMarkup/DocAnnotations":concept("Tutor/Markup/SourceCodeMarkup/DocAnnotations",[],[],{},[]),"Tutor/Markup/QuestionMarkup/TypeDescriptor":concept("Tutor/Markup/QuestionMarkup/TypeDescriptor",[],[],{"list","real","]","map","datetime","[","void","arb","value","str","...]","int",",","bool","tuple","same","num","set","loc"},[]),"Tutor/Concept/Description":concept("Tutor/Concept/Description",[],[],{"Description",":"},[]),"Tutor/Concept/Benefits":concept("Tutor/Concept/Benefits",[],[],{"Benefits",":"},[]),"Tutor/Markup/InlineMarkup/Image":concept("Tutor/Markup/InlineMarkup/Image",[],[],{"|","](","![",")"},[]),"Tutor/Concept/Types":concept("Tutor/Concept/Types",[],[],{":","Types"},[]),"Tutor/Markup/SourceCodeMarkup/ConceptMapping":concept("Tutor/Markup/SourceCodeMarkup/ConceptMapping",[],[],{},[]),"Tutor/Maintenance/Removing":concept("Tutor/Maintenance/Removing",[],[],{},[]),"Tutor":concept("Tutor",[],["Contents"],{},[]),"Tutor/Contents":concept("Tutor/Contents",[],[],{},[]),"Tutor/Maintenance/Renaming":concept("Tutor/Maintenance/Renaming",[],[],{},[]),"Tutor/Concept":concept("Tutor/Concept",[],["Name","Synopsis","Syntax","Types","Function","Details","Description","Examples","Benefits","Pitfalls","Questions"],{"Questions","Pitfalls",",","Benefits","Description","Name",":","Examples","Types","Function","Synopsis","Syntax","Details"},[]),"Tutor/Markup/StructureMarkup/screen":concept("Tutor/Markup/StructureMarkup/screen",[],[],{"\>","\<","screen","\</"},[]),"Tutor/Markup/QuestionMarkup/Type":concept("Tutor/Markup/QuestionMarkup/Type",[],[],{"QType",":"},[tvQuestion("Tutor/Markup/QuestionMarkup/Type","1",typeOfExpr(),details(" ",[],"","","\<A:set[int]\>","",false,false,[<"A",set(int(-20,20),1,5)>],[],void(),"")),tvQuestion("Tutor/Markup/QuestionMarkup/Type","2",typeOfExpr(),details(" ",[],"","","\<A:set[arb[int,str,real]]\> + \<B:same[A]\>","",false,false,[<"A",set(arb(0,[int(-20,20),str(),real(-20,20)]),1,5)>,<"B",same("A")>],[],void(),""))]),"Tutor/Markup/StructureMarkup/Table":concept("Tutor/Markup/StructureMarkup/Table",[],[],{"|","|---------|---------|"},[]),"Tutor/Markup/StructureMarkup/NumberedLists":concept("Tutor/Markup/StructureMarkup/NumberedLists",[],[],{"###","#","##"},[]),"Tutor/Markup/StructureMarkup/figure":concept("Tutor/Markup/StructureMarkup/figure",[],[],{"\>","\<","x","figure","\</"},[]),"Tutor/Markup/InlineMarkup/Bold":concept("Tutor/Markup/InlineMarkup/Bold",[],[],{"__"},[]),"Tutor/Concept/Syntax":concept("Tutor/Concept/Syntax",[],[],{":","Syntax"},[]),"Tutor/Markup/QuestionMarkup/Text":concept("Tutor/Markup/QuestionMarkup/Text",[],[],{"QText",":","a"},[textQuestion("Tutor/Markup/QuestionMarkup/Text","Taller"," What is taller, the Eiffel Tower or the Empire State Building?\n",{"empire"})])),["![","#","##","###",")","*","**","***",",","...]",":","\<","\</","==","===","====","\>","\>`","Adding","Authoring","Benefits","Bold","BulletLists","Callout","Choice","Code","Concept","ConceptMapping","Contents","Description","Details","DocAnnotations","Examples","ExternalURL","Function","Image","Index","InlineMarkup","Italic","Maintenance","Markup","Name","NamedParagraph","NewParagraph","NumberedLists","Pitfalls","QChoice","QText","QType","QValue","QuestionMarkup","Questions","ReferenceToConcept","Removing","Renaming","SourceCodeMarkup","StructureMarkup","Synopsis","Syntax","Table","TableOfContents","Text","Tutor","Type","TypeDescriptor","Types","Value","VarName","Variable","Varname","[","]","](","_","__","`\<","arb","bool","datetime","figure","int","list","listing","loc","map","num","real","same","screen","set","str","toc","tuple","void","warning","|","|---------|---------|"])