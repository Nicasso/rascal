# ConceptMapping

.Synopsis
Map the concepts in Rascal source code to a subtree of a course.

.Syntax

.Types

.Function
       
.Usage

.Details

.Description

Each Rascal library file defines some module `M` that may declare concepts `M/c__~1~`, `M/c__~2~`, ....
as indicated by embedded `@doc` annotations.
How are these concepts included in a Tutor course?
The answer is a mapping file `remote-concepts.value` that may exist at the top level of a course.
It is a value of type `list[tuple[str root, loc libFile]]`, i.e. a list of tuples that
associates a root (a concept name) with a Rascal source file. All concepts in `libFile`
become subconcepts of that root. Moving the documentation for a library file is as simple as 
changing a single entry is this mapping. 

.Examples
This is an excerpt from the  `remote-concepts.value` for the Rascal course:
[source,rascal]
----
[<"Rascal/Libraries/Prelude",|clib-rascal:///Boolean.rsc|>,
<"Rascal/Libraries/Prelude",|clib-rascal:///DateTime.rsc|>,
<"Rascal/Libraries/Prelude",|clib-rascal:///List.rsc|>,
<"Rascal/Libraries/Prelude",|clib-rascal:///Map.rsc|>,
...
<"Rascal/Libraries/Prelude",|clib-rascal:///ParseTree.rsc|>,
<"Rascal/Libraries",|clib-rascal:///util/Benchmark.rsc|>,
<"Rascal/Libraries",|clib-rascal:///util/Eval.rsc|>,
<"Rascal/Libraries",|clib-rascal-eclipse:///util/IDE.rsc|>,
<"Rascal/Libraries",|clib-rascal:///util/Math.rsc|>]
----

This establishes that the function `now` that is declared in the `DateTime.rsc` library files
will become `Rascal/Libraries/Prelude/DateTime/now`.

.Benefits

.Pitfalls

*  Be carefull to avoid spaces, since the value reader does not like them.

