course("RascalTests",[],("RascalTests/TestSoftwareEvolution":concept("RascalTests/TestSoftwareEvolution",[],[],{},[choiceQuestion("RascalTests/TestSoftwareEvolution","1","  Sets can be used to represent a sequence of values when\n",[good("The values have no duplicates and no order."),bad("The values have duplicates."),bad("The values are unordered.")]),choiceQuestion("RascalTests/TestSoftwareEvolution","2","  The type of a list is determined by:\n",[good("The upperbound of the type of all elements."),bad("The type of the first element that was first added to the list."),bad("The upperbound of the type of two arbitrary elements.")]),tvQuestion("RascalTests/TestSoftwareEvolution","3",typeOfExpr(),details(" ",[],"","","\<A:set[arb[int,real,str,loc]]\>","",false,false,[<"A",set(arb(0,[int(-20,20),real(-20,20),str(),\loc()]),1,5)>],[],void(),"")),tvQuestion("RascalTests/TestSoftwareEvolution","4",typeOfExpr(),details(" ",[],"","","\<A:list[arb[int,real,str,loc]]\>","",false,false,[<"A",list(arb(0,[int(-20,20),real(-20,20),str(),\loc()]),1,5)>],[],void(),"")),tvQuestion("RascalTests/TestSoftwareEvolution","5",typeOfExpr(),details(" ",[],"","","\<A:map[str,arb]\>","",false,false,[<"A",map(str(),arb(0,[bool(),int(-20,20),real(-20,20),num(-20,20),str(),\loc(),datetime()]))>],[],void(),"")),tvQuestion("RascalTests/TestSoftwareEvolution","6",typeOfExpr(),details(" ",[],"","","{\<A\>, "," } ",false,true,[<"A",int(-20,20)>],[],set(int(-20,20),1,5),"one or more integer values separated by commas")),tvQuestion("RascalTests/TestSoftwareEvolution","7",typeOfExpr(),details(" ",[],"","","(\<A\>: ",")",false,true,[<"A",str()>],[],map(str(),int(-20,20)),"a map from strings to integers")),tvQuestion("RascalTests/TestSoftwareEvolution","8",typeOfExpr(),details(" ",[],"","","\<A:set[arb[int,real,num,str,loc]]\>","",false,false,[<"A",set(arb(0,[int(-20,20),real(-20,20),num(-20,20),str(),\loc()]),1,5)>],[],void(),"")),tvQuestion("RascalTests/TestSoftwareEvolution","9",typeOfExpr(),details(" ",[],"","","{\<A:int\>, \<B:str\>, \<C:int\>}","",false,false,[<"A",int(-20,20)>,<"B",str()>,<"C",int(-20,20)>],[],void(),"")),tvQuestion("RascalTests/TestSoftwareEvolution","10",typeOfExpr(),details(" ",[],"","","\<A:rel[str,int,loc]\>","",false,false,[<"A",set(tuple([str(),int(-20,20),\loc()]),1,5)>],[],void(),"")),tvQuestion("RascalTests/TestSoftwareEvolution","11",typeOfExpr(),details(" ",[],"","","\<A:rel[int[0,20],int]\>","",false,false,[<"A",set(tuple([int(0,20),int(-20,20)]),1,5)>],[],void(),"")),tvQuestion("RascalTests/TestSoftwareEvolution","12",valueOfExpr(),details(" Determine the number of elements in a list\n",[],"import List;\ntext = [\"abc\", \"def\", \"ghi\"];\n","","","(text) == 3;",false,true,[],[],void(),"")),tvQuestion("RascalTests/TestSoftwareEvolution","13",valueOfExpr(),details(" Determine the number of strings that contain \"a\".\n",[],"text = [\"andra\", \"moi\", \"ennepe\", \"Mousa\", \"polutropon\"];\npublic int count(list[str] text){\n  n = 0;\n  for(s \<- text)\n    if("," := s)\n      n +=1;\n  return n;\n}\n\n","count(text) == 2;","",true,false,[],[],void(),"")),tvQuestion("RascalTests/TestSoftwareEvolution","14",valueOfExpr(),details(" Return the strings that contain \"o\".\n",[],"text = [\"andra\", \"moi\", \"ennepe\", \"Mousa\", \"polutropon\"];\npublic list[str] find(list[str] text){\n  return \n    for(s \<- text)\n      if(/o/ := s)\n        ",";\n}\n","find(text) == [\"moi\", \"Mousa\", \"polutropon\"];","",true,false,[],[],void(),"")),tvQuestion("RascalTests/TestSoftwareEvolution","15",valueOfExpr(),details(" Complete this function that finds duplicates in a list of strings\n",[],"text = [\"the\", \"jaws\", \"that\", \"bite\", \"the\", \"claws\", \"that\", \"catch\"];\npublic list[str] duplicates(list[str] text){\n    m = {};\n    return \n      for(s \<- text)\n        if(",")\n           append s;\n        else\n           m += s;\n}\n","duplicates(text) == [\"the\", \"that\"];","",true,false,[],[],void(),"")),tvQuestion("RascalTests/TestSoftwareEvolution","16",valueOfExpr(),details(" Complete this function that tests that a list of words forms a palindrome. A palindrome is a word that is symmetrical \n",[],"import List;\npublic bool isPalindrome(list[str] words){\n  return words == ",";\n}\n","isPalindrome([\"a\", \"b\", \"b\", \"a\"]) == true;","",true,false,[],[],void(),""))]),"RascalTests":concept("RascalTests",[],[],{},[])),["RascalTests","TestSoftwareEvolution"])